
AVRASM ver. 2.1.42  C:\avrasm1\New Folder\bootloader_44A_r3\bootloader_44A.asm Mon Aug 11 19:24:08 2014

C:\avrasm1\New Folder\bootloader_44A_r3\bootloader_44A.asm(3): Including file 'C:\Program Files\Atmel\AVR Tools\AvrAssembler2\Appnotes\tn44adef.inc'
                 
                 
                 	; change these lines accordingly to your application	
                 .include "tn44adef.inc"
                 
                 ;***** Created: 2011-08-25 21:00 ******* Source: ATtiny44A.xml ***********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "tn44Adef.inc"
                 ;* Title             : Register/Bit Definitions for the ATtiny44A
                 ;* Date              : 2011-08-25
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATtiny44A
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _TN44ADEF_INC_
                 #define _TN44ADEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATtiny44A
                 #pragma AVRPART ADMIN PART_NAME ATtiny44A
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x92
                 .equ	SIGNATURE_002	= 0x07
                 
                 #pragma AVRPART CORE CORE_VERSION V2
                 #pragma AVRPART CORE NEW_INSTRUCTIONS lpm rd,z+
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0B	= 0x3c
                 .equ	GIMSK	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK0	= 0x39
                 .equ	TIFR0	= 0x38
                 .equ	SPMCSR	= 0x37
                 .equ	OCR0A	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	TCCR0B	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	TCCR0A	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	DWDR	= 0x27
                 .equ	CLKPR	= 0x26
                 .equ	ICR1L	= 0x24
                 .equ	ICR1H	= 0x25
                 .equ	GTCCR	= 0x23
                 .equ	TCCR1C	= 0x22
                 .equ	WDTCSR	= 0x21
                 .equ	PCMSK1	= 0x20
                 .equ	EEARH	= 0x1f
                 .equ	EEARL	= 0x1e
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	GPIOR2	= 0x15
                 .equ	GPIOR1	= 0x14
                 .equ	GPIOR0	= 0x13
                 .equ	PCMSK0	= 0x12
                 .equ	USIBR	= 0x10
                 .equ	USIDR	= 0x0f
                 .equ	USISR	= 0x0e
                 .equ	USICR	= 0x0d
                 .equ	TIMSK1	= 0x0c
                 .equ	TIFR1	= 0x0b
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	ADCSRB	= 0x03
                 .equ	DIDR0	= 0x01
                 .equ	PRR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Data Register, Port B
                 .equ	PORTB0	= 0	; 
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; 
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; 
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; 
                 .equ	PB3	= 3	; For compatibility
                 
                 ; DDRB - Data Direction Register, Port B
                 .equ	DDB0	= 0	; 
                 .equ	DDB1	= 1	; 
                 .equ	DDB2	= 2	; 
                 .equ	DDB3	= 3	; 
                 
                 ; PINB - Input Pins, Port B
                 .equ	PINB0	= 0	; 
                 .equ	PINB1	= 1	; 
                 .equ	PINB2	= 2	; 
                 .equ	PINB3	= 3	; 
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ADCSRB - ADC Control and Status Register B
                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	AINBG	= ACBG	; For compatibility
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR0 - 
                 .equ	ADC0D	= 0	; ADC 0 Digital input buffer disable
                 .equ	ADC1D	= 1	; ADC 1 Digital input buffer disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - ADC Multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bit 0
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bit 1
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bit 2
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bit 3
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bit 4
                 .equ	MUX5	= 5	; Analog Channel and Gain Selection Bit 5
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - ADC Control and Status Register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bit 0
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bit 1
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bit 2
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; ADCSRB - ADC Control and Status Register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 .equ	ADLAR	= 4	; ADC Left Adjust Result
                 .equ	BIN	= 7	; Bipolar Input Mode
                 
                 ; DIDR0 - Digital Input Disable Register 0
                 ;.equ	ADC0D	= 0	; ADC0 Digital Input Disable
                 ;.equ	ADC1D	= 1	; ADC1 Digital Input Disable
                 .equ	ADC2D	= 2	; ADC2 Digital Input Disable
                 .equ	ADC3D	= 3	; ADC3 Digital Input Disable
                 .equ	ADC4D	= 4	; ADC4 Digital Input Disable
                 .equ	ADC5D	= 5	; ADC5 Digital Input Disable
                 .equ	ADC6D	= 6	; ADC6 Digital Input Disable
                 .equ	ADC7D	= 7	; ADC7 Digital Input Disable
                 
                 
                 ; ***** USI **************************
                 ; USIBR - USI Buffer Register
                 .equ	USIBR0	= 0	; USI Buffer Register bit 0
                 .equ	USIBR1	= 1	; USI Buffer Register bit 1
                 .equ	USIBR2	= 2	; USI Buffer Register bit 2
                 .equ	USIBR3	= 3	; USI Buffer Register bit 3
                 .equ	USIBR4	= 4	; USI Buffer Register bit 4
                 .equ	USIBR5	= 5	; USI Buffer Register bit 5
                 .equ	USIBR6	= 6	; USI Buffer Register bit 6
                 .equ	USIBR7	= 7	; USI Buffer Register bit 7
                 
                 ; USIDR - USI Data Register
                 .equ	USIDR0	= 0	; USI Data Register bit 0
                 .equ	USIDR1	= 1	; USI Data Register bit 1
                 .equ	USIDR2	= 2	; USI Data Register bit 2
                 .equ	USIDR3	= 3	; USI Data Register bit 3
                 .equ	USIDR4	= 4	; USI Data Register bit 4
                 .equ	USIDR5	= 5	; USI Data Register bit 5
                 .equ	USIDR6	= 6	; USI Data Register bit 6
                 .equ	USIDR7	= 7	; USI Data Register bit 7
                 
                 ; USISR - USI Status Register
                 .equ	USICNT0	= 0	; USI Counter Value Bit 0
                 .equ	USICNT1	= 1	; USI Counter Value Bit 1
                 .equ	USICNT2	= 2	; USI Counter Value Bit 2
                 .equ	USICNT3	= 3	; USI Counter Value Bit 3
                 .equ	USIDC	= 4	; Data Output Collision
                 .equ	USIPF	= 5	; Stop Condition Flag
                 .equ	USIOIF	= 6	; Counter Overflow Interrupt Flag
                 .equ	USISIF	= 7	; Start Condition Interrupt Flag
                 
                 ; USICR - USI Control Register
                 .equ	USITC	= 0	; Toggle Clock Port Pin
                 .equ	USICLK	= 1	; Clock Strobe
                 .equ	USICS0	= 2	; USI Clock Source Select Bit 0
                 .equ	USICS1	= 3	; USI Clock Source Select Bit 1
                 .equ	USIWM0	= 4	; USI Wire Mode Bit 0
                 .equ	USIWM1	= 5	; USI Wire Mode Bit 1
                 .equ	USIOIE	= 6	; Counter Overflow Interrupt Enable
                 .equ	USISIE	= 7	; Start Condition Interrupt Enable
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; MCUCR - MCU Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 
                 ; GIMSK - General Interrupt Mask Register
                 .equ	GICR	= GIMSK	; For compatibility
                 .equ	PCIE0	= 4	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 5	; Pin Change Interrupt Enable 1
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 
                 ; GIFR - General Interrupt Flag register
                 .equ	PCIF0	= 4	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 5	; Pin Change Interrupt Flag 1
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 
                 ; PCMSK1 - Pin Change Enable Mask 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask Bit 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask Bit 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask Bit 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask Bit 11
                 
                 ; PCMSK0 - Pin Change Enable Mask 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask Bit 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask Bit 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask Bit 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask Bit 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask Bit 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask Bit 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask Bit 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask Bit 7
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEARH - EEPROM Address Register High Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 0
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag Register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode bit 0
                 .equ	WGM01	= 1	; Waveform Generation Mode bit 1
                 .equ	COM0B0	= 4	; Compare Match Output B Mode bit 0
                 .equ	COM0B1	= 5	; Compare Match Output B Mode bit 1
                 .equ	COM0A0	= 6	; Compare Match Output A Mode bit 0
                 .equ	COM0A1	= 7	; Compare Match Output A Mode bit 1
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select bit 0
                 .equ	CS01	= 1	; Clock Select bit 1
                 .equ	CS02	= 2	; Clock Select bit 2
                 .equ	WGM02	= 3	; Waveform Generation Mode bit 2
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register A
                 .equ	OCR0A_0	= 0	; 
                 .equ	OCR0A_1	= 1	; 
                 .equ	OCR0A_2	= 2	; 
                 .equ	OCR0A_3	= 3	; 
                 .equ	OCR0A_4	= 4	; 
                 .equ	OCR0A_5	= 5	; 
                 .equ	OCR0A_6	= 6	; 
                 .equ	OCR0A_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register B
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/CounterN
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Timer/Counter1 Output Compare A Match Flag
                 .equ	OCF1B	= 2	; Timer/Counter1 Output Compare B Match Flag
                 .equ	ICF1	= 5	; Timer/Counter1 Input Capture Flag
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Pulse Width Modulator Select Bit 0
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Pulse Width Modulator Select Bit 1
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	COM1B0	= 4	; Comparet Ouput Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Clock Select bit 0
                 .equ	CS11	= 1	; Clock Select 1 bit 1
                 .equ	CS12	= 2	; Clock Select1 bit 2
                 .equ	WGM12	= 3	; Waveform Generation Mode Bit 2
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode Bit 3
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter1 Control Register C
                 .equ	FOC1B	= 6	; Force Output Compare for Channel B
                 .equ	FOC1A	= 7	; Force Output Compare for Channel A
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCSR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	RFLB	= 3	; Read fuse and lock bits
                 .equ	CTPB	= 4	; Clear temporary page buffer
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	SM0	= 3	; Sleep Mode Select Bit 0
                 .equ	SM1	= 4	; Sleep Mode Select Bit 1
                 .equ	SE	= 5	; Sleep Enable
                 .equ	PUD	= 6	; 
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; GPIOR2 - General Purpose I/O Register 2
                 .equ	GPIOR20	= 0	; 
                 .equ	GPIOR21	= 1	; 
                 .equ	GPIOR22	= 2	; 
                 .equ	GPIOR23	= 3	; 
                 .equ	GPIOR24	= 4	; 
                 .equ	GPIOR25	= 5	; 
                 .equ	GPIOR26	= 6	; 
                 .equ	GPIOR27	= 7	; 
                 
                 ; GPIOR1 - General Purpose I/O Register 1
                 .equ	GPIOR10	= 0	; 
                 .equ	GPIOR11	= 1	; 
                 .equ	GPIOR12	= 2	; 
                 .equ	GPIOR13	= 3	; 
                 .equ	GPIOR14	= 4	; 
                 .equ	GPIOR15	= 5	; 
                 .equ	GPIOR16	= 6	; 
                 .equ	GPIOR17	= 7	; 
                 
                 ; GPIOR0 - General Purpose I/O Register 0
                 .equ	GPIOR00	= 0	; 
                 .equ	GPIOR01	= 1	; 
                 .equ	GPIOR02	= 2	; 
                 .equ	GPIOR03	= 3	; 
                 .equ	GPIOR04	= 4	; 
                 .equ	GPIOR05	= 5	; 
                 .equ	GPIOR06	= 6	; 
                 .equ	GPIOR07	= 7	; 
                 
                 ; PRR - Power Reduction Register
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSI	= 1	; Power Reduction USI
                 .equ	PRTIM0	= 2	; Power Reduction Timer/Counter0
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 
                 ; CLKPR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lockbit
                 .equ	LB2	= 1	; Lockbit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock source
                 .equ	CKSEL1	= 1	; Select Clock source
                 .equ	CKSEL2	= 2	; Select Clock source
                 .equ	CKSEL3	= 3	; Select Clock source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock Output Enable
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through the Chip Erase
                 .equ	WDTON	= 4	; Watchdog Timer always on
                 .equ	SPIEN	= 5	; Enable Serial Program and Data Downloading
                 .equ	DWEN	= 6	; DebugWIRE Enable
                 .equ	RSTDISBL	= 7	; External Reset disable
                 
                 ; EXTENDED fuse bits
                 .equ	SELFPRGEN	= 0	; Self-Programming Enable
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x07ff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 256
                 .equ	RAMEND	= 0x015f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x00ff
                 .equ	EEPROMEND	= 0x00ff
                 .equ	EEADRBITS	= 8
                 #pragma AVRPART MEMORY PROG_FLASH 4096
                 #pragma AVRPART MEMORY EEPROM 256
                 #pragma AVRPART MEMORY INT_SRAM SIZE 256
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x0
                 .equ	NRWW_STOP_ADDR	= 0x7ff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x0
                 .equ	PAGESIZE	= 32
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	EXT_INT0addr	= 0x0001	; External Interrupt Request 0
                 .equ	PCI0addr	= 0x0002	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x0003	; Pin Change Interrupt Request 1
                 .equ	WATCHDOGaddr	= 0x0004	; Watchdog Time-out
                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x0009	; Timer/Counter0 Compare Match A
                 .equ	OC0Baddr	= 0x000a	; Timer/Counter0 Compare Match B
                 .equ	OVF0addr	= 0x000b	; Timer/Counter0 Overflow
                 .equ	ACIaddr	= 0x000c	; Analog Comparator
                 .equ	ADCCaddr	= 0x000d	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x000e	; EEPROM Ready
                 .equ	USI_STRaddr	= 0x000f	; USI START
                 .equ	USI_OVFaddr	= 0x0010	; USI Overflow
                 
                 .equ	INT_VECTORS_SIZE	= 17	; size in words
                 
                 #endif  /* _TN44ADEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 .equ	FamilyAVR=0x31		; AVR Family ("1":ATtiny, "2":ATmega)
                 .equ	IdTypeAVR=0x15		; must exists in "piccodes.ini"	
                 #define	max_flash 0x800		; in WORDS, not bytes!!! (= 'max flash memory' from "piccodes.ini" divided by 2)
                         
                 .equ	xtal	=	8000000 ; you may also want to change: _HS_OSC _XT_OSC
                 .equ	baud    =	9600    ; standard TinyBld baud rates: 115200 or 19200
                 
                 .equ	Calib   =	0x56    ; 8MHz Calibration value
                 
                         #define EEPSZ   256	        ; EEPROM Size(128/256/512)
                         #define TXP     2	        ; PIC TX Data port (1:A,2:B), Please refer to the table below
                         #define TX	1		; ATTINY TX Data output pin (i.e. 3 = TXP,3)
                         #define RXP     2	        ; PIC RX Data port (1:A,2:B), Please refer to the table below
                         #define RX      0               ; ATTINY RX Data input pin (i.e. 3 = RXP,3)
                 ;        #define Direct_TX               ; RS-232C TX Direct Connection(No use MAX232)
                 ;        #define Direct_RX               ; RS-232C RX Direct Connection(No use MAX232)
                 
                 ;   The above 14 lines can be changed and buid a bootloader for the desired frequency
                 
                 ; +---------+---------+--------+------------+------------+-----------+------+--------+------+
                 ; |AVRFamily|IdTypePIC| Device | Erase_Page | Write_Page | max_flash | PORT | EEPROM | PDIP |
                 ; +---------+---------+--------+------------+------------+-----------+------+--------+------+
                 ; |   0x31  |   0x14  | TN24A  |  16 words  |  16 words  |  0x0400   | A B  |  128   |  20  |
                 ; |   0x31  |   0x15  | TN44A  |  32 words  |  32 words  |  0x0800   | A B  |  256   |  20  |
                 ; |   0x31  |   0x16  | TN84A  |  32 words  |  32 words  |  0x1000   | A B  |  512   |  20  |
                 ; +---------+---------+--------+------------+------------+-----------+------+--------+------+
                 
                  #if (TXP==1)
                  #endif
                  #if (TXP==2)
                 	#define TXPORT     PORTB
                 	#define TXDDR      DDRB
                  #endif
                  #if (RXP==1)
                  #endif
                  #if (RXP==2)
                 	#define RXPORT     PINB
                  #endif
                 
                     	;********************************************************************
                     	;       Tiny Bootloader         ATTINY24A/44A/84A       Size=100words
                 	;
                 	;	This program is only available in Tiny PIC Bootloader +.
                 	;	(2014.08.11 Revision 3)
                 	;
                 	;	Tiny PIC Bootloader +
                 	;	https://sourceforge.net/projects/tinypicbootload/
                 	;
                 	;	!!!!! Set Fuse Bit SELFPRGEN=0,CKDIV8=1 and 8MHz Calibration value !!!!!
                 	;
                 	;	Please add the following line to piccodes.ini
                 	;
                 	;	$14, 1, ATTINY 24A/25/261A, 	$800, 128, 200, 32,
                 	;	$15, 1, ATTINY 44A/45/461A, 	$1000, 256, 200, 64,
                 	;	$16, 1, ATTINY 84A/85/861A,	$2000, 512, 200, 64,
                 	;
                 	;********************************************************************
                 
                 
                 
                         #define first_address max_flash-100 ; 100 word in size
                 
                 #define 	crc	r19
                 #define 	cnt1	r20
                 #define 	flag	r21
                 #define 	count	r22
                 #define 	rs	r23
                 #define 	cn	r24
                 #define 	rxd	r25
                 
                 .cseg
                 ;0000000000000000000000000 RESET 00000000000000000000000000
                 
                                 .org    0x0000		;;Reset vector
                 ;		RJMP	IntrareBootloader
000000 cf9f      		.dw	0xcf9f		;RJMP	PC-0x60
                 
                 ;&&&&&&&&&&&&&&&&&&&&&&&   START     &&&&&&&&&&&&&&&&&
                 ;----------------------  Bootloader  ----------------------
                 ;               
                                 ;PC_flash:      C1h          AddrH  AddrL  nr  ...(DataLo DataHi)...  crc
                                 ;PIC_response:  id   K                                                 K
                 
                                 .org     first_address
                 ;               nop
                 ;               nop
                 ;               nop
                 ;               nop
                 
                                 .org     first_address+4
                 IntrareBootloader:
0007a0 9ab9      		SBI	TXDDR,TX	; set TX Port
0007a1 e596      		LDI	rxd,Calib	; set 8MHz Calibration value
0007a2 bf91      		OUT	OSCCAL,rxd
                 
0007a3 d041      		RCALL	Receive		; wait for computer
0007a4 5c91                      SUBI	rxd,0xC1	; Expect C1
0007a5 f009                      BREQ	PC+2		; skip if C1
0007a6 c04a                      RJMP	way_to_exit	; connection errer or timeout
0007a7 e195                      LDI	rxd,IdTypeAVR	; send IdType
0007a8 d02c              	RCALL	SendL
                 MainLoop:
0007a9 e391      		LDI	rxd,FamilyAVR	; send ATtiny Family ID
                 mainl:
0007aa d02a      		RCALL	SendL
0007ab 2733      		CLR	crc		; clear Checksum
0007ac d038                      RCALL	Receive		; get ADR_H
0007ad 2ff9      		MOV	r31,rxd		; set r31
0007ae 2f59      		MOV	flag,rxd	; set flag
                  #if (EEPSZ == 512)
                  #else
0007af 0000      		NOP
                  #endif
0007b0 d034                      RCALL	Receive		; get ADR_L
0007b1 2fe9      		MOV	r30,rxd		; set r30
0007b2 bb9e      		OUT	EEARL,rxd	; set EEARL
0007b3 0fee      		LSL	r30		; set PCPAGE:PCWORD
0007b4 1fff      		ROL	r31
0007b5 9732      		SBIW 	r30,2 		; PCPAGE:PCWORD=PCPAGE:PCWORD-2
0007b6 d02e                      RCALL	Receive		; get count
0007b7 2f69      		MOV	count,rxd	; set count
                 rcvoct:
0007b8 d02c      	        RCALL	Receive		; get Data(L)
0007b9 2e09      		MOV	r0,rxd		; set Data(L)
0007ba bb9d      		OUT	EEDR,rxd	; set EEDR
0007bb d029                      RCALL	Receive		; get Data(H)
0007bc 2e19      		MOV	r1,rxd		; set Data(H)
0007bd 9632      		ADIW	r30,2		; PCPAGE:PCWORD=PCPAGE:PCWORD+2
0007be e091      		LDI	rxd,0x01	; write buffer
0007bf d012      		RCALL	ctrl_flash
                 
0007c0 5062      		SUBI	count,2		; count=count-2
0007c1 f7b1                      BRNE	rcvoct		; loop
                 
0007c2 d022                      RCALL	Receive		; get Checksum
0007c3 f449      		BRNE	ziieroare	; Checksum error ?
                 
0007c4 fd56      		SBRC	flag,6		; is flash ?
0007c5 c005      		RJMP	eeprom
                 flash:
0007c6 e093      		LDI	rxd,0x03	; erase Flash Page
0007c7 d00a      		RCALL	ctrl_flash
0007c8 e095      		LDI	rxd,0x05	; write Flash Page
0007c9 d008      		RCALL	ctrl_flash
0007ca cfde                      RJMP	MainLoop	; loop
                 eeprom:
0007cb d003      		RCALL	w_eeprom	; write EEPROM
0007cc cfdc      		RJMP	MainLoop	; loop
                 ziieroare:
0007cd e49e      		LDI	rxd,'N'		; send "N"
0007ce cfdb                      RJMP	mainl		; retry
                 
                 ; ********************************************************************
                 ;
                 ;		Write EEPROM
                 ;
                 ;		Set EEARH:EEARL/EEDR and call
                 ;
                 ; ********************************************************************
                 
                 w_eeprom:
0007cf 9ae2      		SBI	EECR,EEMPE
0007d0 9ae1      		SBI	EECR,EEPE
0007d1 9508      		RET
                 
                 ; ********************************************************************
                 ;
                 ;		Write and Erace flash/buffer
                 ;
                 ;		Set R30:R31/R0:R1/rxd and call
                 ;
                 ;		rxd:1 write buffer
                 ;		rxd:3 erase Flash Page
                 ;		rxd:5 write Flash Page
                 ;
                 ; ********************************************************************
                 
                 ctrl_flash:
0007d2 bf97      		OUT	SPMCSR,rxd
0007d3 95e8      		SPM
0007d4 9508      		RET
                 
                 ; ********************************************************************
                 ;
                 ;		RS-232C Send 1byte
                 ;
                 ;		Set rxd and call
                 ;
                 ; ********************************************************************
                 
                 SendL:
                         #ifdef  Direct_TX
                 	#else
0007d5 9ac1      		SBI	PORTB,TX
                 	#endif
0007d6 e184              	LDI     cn,2*(1+8+1)	; 10-bit Data
0007d7 c004      		RJMP	PC+5		; Start bit
                 
0007d8 9597              	ROR     rxd		; Rotate Right through Carry	[1] 1+5+6N+16+2=6N+24
                 
                  	#ifdef	Direct_TX
                  	#else
0007d9 f408              	brcc	PC+2
0007da 9ac1              	sbi     PORTB,TX	; set TX='1' if Carry='1'
0007db f008              	brcs	PC+2
0007dc 98c1              	cbi     PORTB,TX	; set TX='0' if Carry='0'
                  	#endif
                 
0007dd d001              	rcall	bwait		; wait 1 bit and Carry='1'	[3+3+3N+5+3N+5]
0007de f7c9              	brne    PC-6		; loop				[2]
                 bwait:					; wait 1 bit
0007df d000      		rcall	bwait2
                 bwait2:					; wait 1/2bit
0007e0 e876      		ldi	rs,(xtal/baud-22)/6-1		;[1] 1+(1+2)*N-1+1+4=3N+5
0007e1 5071              	subi	rs,1				;[1]
0007e2 f7f0              	brcc	PC-1				;[2/1]
0007e3 958a      		dec     cn				;[1]
0007e4 9508      		ret					;[4]
                 
                 ; ********************************************************************
                 ;
                 ;		RS-232C Recieve 1byte with Timeout and Check Sum
                 ;
                 ; ********************************************************************
                 
                 Receive:
0007e5 e141      		LDI	cnt1,xtal/500000+1	; for 20MHz => 11 => 1second
                 rpt2:
0007e6 27cc      		CLR	r28
0007e7 27dd      		CLR	r29
                 rptc:					; check Start bit
                         #ifdef  Direct_RX
                         #else
0007e8 99b0                      SBIC	RXPORT,RX
                         #endif
0007e9 c003                      RJMP	PC+4
0007ea d009      		RCALL	RcvL1		; get 1 byte
0007eb 0f39                      ADD	crc,rxd		; compute checksum
0007ec 9508                      RET
                 
0007ed 9721                      SBIW	r28,1
0007ee f7c9                      BRNE	rptc
0007ef 954a                      DEC	cnt1
0007f0 f7a9                      BRNE	rpt2
                 way_to_exit:
0007f1 cfaa                      RJMP	first_address	; timeout:exit in all other cases
                 
                 ; ********************************************************************
                 ;
                 ;		RS-232C Recieve 1byte
                 ;
                 ;		Return in rxd
                 ;
                 ; ********************************************************************
                 
                 RcvL:
                         #ifdef  Direct_RX
                         #else
0007f2 99b0                      SBIC	RXPORT,RX
                         #endif
0007f3 cffe                      RJMP	PC-1		; wait Start bit
                 RcvL1:
0007f4 dfeb      		RCALL	bwait2		; wait 1/2 bit
0007f5 e182              	LDI     cn,2*(1+8)	; 9-bit Data
                 
0007f6 9597      		ROR	rxd		; set Data			[1] 1+6N+16+2+2=6N+21
0007f7 dfe7      		RCALL	bwait		; wait 1 bit and Carry='1'	[6N+16]
                 
                         #ifdef  Direct_RX
                         #else
0007f8 9bb0                      SBIS	PINB,RX
                         #endif
0007f9 9488                      CLC
0007fa f7d9      		BRNE	PC-4		; loop				[2]
0007fb 9508      		RET
                 
                 ; ********************************************************************
                 ; After reset
                 ; Do not expect the memory to be zero,
                 ; Do not expect registers to be initialised like in catalog.
                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny44A register use summary:
r0 :   1 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   2 r20:   2 r21:   2 r22:   2 r23:   2 
r24:   3 r25:  21 r26:   0 r27:   0 r28:   2 r29:   1 r30:   4 r31:   2 
x  :   0 y  :   0 z  :   0 
Registers used: 13 out of 35 (37.1%)

ATtiny44A instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   1 adiw  :   1 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   1 break :   0 breq  :   1 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   6 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 cbi   :   1 cbr   :   0 clc   :   1 
clh   :   0 cli   :   0 cln   :   0 clr   :   3 cls   :   0 clt   :   0 
clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 cpi   :   0 
cpse  :   0 dec   :   2 eor   :   0 icall :   0 ijmp  :   0 in    :   0 
inc   :   0 ld    :   0 ldd   :   0 ldi   :  11 lds   :   0 lpm   :   0 
lsl   :   1 lsr   :   0 mov   :   6 movw  :   0 neg   :   0 nop   :   1 
or    :   0 ori   :   0 out   :   4 pop   :   0 push  :   0 rcall :  18 
ret   :   5 reti  :   0 rjmp  :   9 rol   :   1 ror   :   2 sbc   :   0 
sbci  :   0 sbi   :   5 sbic  :   2 sbis  :   1 sbiw  :   2 sbr   :   0 
sbrc  :   1 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   2 st    :   0 std   :   0 sts   :   0 sub   :   0 subi  :   3 
swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 27 out of 105 (25.7%)

ATtiny44A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ff8    184      2    186    4096   4.5%
[.dseg] 0x000060 0x000060      0      0      0     256   0.0%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 0 warnings
